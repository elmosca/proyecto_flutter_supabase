---
description: Reglas de Cursor para trabajar con Supabase (CLI, migraciones, RLS, funciones, seguridad y rendimiento)
alwaysApply: true
---

## Principios generales (Supabase + Postgres)
- Usa migraciones controladas por CLI; evita ejecutar SQL manual fuera de `supabase/migrations`.
- Nombra todo con esquema calificado (p. ej., `public.accounts`) y establece `search_path` vacío dentro de funciones SQL.
- Optimiza consultas con índices en columnas de filtros/orden y valida con `EXPLAIN`.
- Prefiere paginación por cursores sobre `OFFSET/LIMIT` para escalabilidad.

## Esquema y Migraciones
- Coloca migraciones en `backend/supabase/migrations`.
- Tras `CREATE TABLE`, agrega:
  - `ALTER TABLE <schema>.<tabla> ENABLE ROW LEVEL SECURITY;`
  - Políticas mínimas necesarias para `SELECT/INSERT/UPDATE/DELETE`.
- Diseña migraciones idempotentes y reversibles cuando sea posible.
- Usa CLI:
  - Crear: `supabase migration new <nombre>`
  - Empujar: `supabase db push`
  - Dif: `supabase db diff -f <nombre>`

## Seguridad (RLS/CLS)
- RLS: obligatorio en toda tabla con datos sensibles.
- Políticas típicas:
  - Lectura autenticados: `USING (auth.role() = 'authenticated')`
  - Acceso a propio registro: `USING (auth.uid() = user_id)` y `WITH CHECK (auth.uid() = user_id)`
- Vistas: `CREATE VIEW ... WITH (security_invoker = true)` para heredar RLS.
- Claves:
  - `anon`: solo cliente, siempre con RLS habilitado.
  - `service_role`: solo servidor; nunca exponer en cliente ni repositorio.
- Si aplicas seguridad por columnas, usa vistas con subconjunto de campos y `GRANT/REVOKE` adecuados.

## Consultas y Rendimiento
- Índices en columnas usadas en `WHERE`, `JOIN`, `ORDER BY` (p. ej., `created_at`, `user_id`).
- Valida con `EXPLAIN` y evita patrones no indexables (como `%texto` inicial).
- Paginación por cursores:
  - Mantén orden estable por clave primaria o índice único.
  - Reutiliza el mismo `ORDER BY` para saltos posteriores.
  - Ejemplo patrón:
    -- SELECT * FROM t WHERE id > $1 ORDER BY id LIMIT $2;

## Funciones
- SQL (plpgsql):
  - `SECURITY INVOKER` por defecto; si usas `SECURITY DEFINER`, justifica y minimiza el alcance.
  - `set search_path = ''` y usa nombres calificados.
- Edge Functions:
  - Almacena secretos con `supabase secrets` (no hardcode).
  - No uses `service_role` desde el cliente; sólo en backend.
  - Documenta entrada/salida y aplica validación de entradas.

## Tipos y Cliente
- Genera tipos a partir del esquema para evitar “type drift”.
- Mantén clientes con configuración estricta y URL/keys por entorno vía `.env` (no commitear).
- Para operaciones complejas, considera RPC (funciones) para centralizar lógica y respetar RLS.

## Entornos y CLI
- Desarrollo local:
  - `supabase start|stop|status` en `backend/supabase/`
  - `.env` desde `.env.example`; nunca subir `.env` reales.
- Branching por entorno (dev/staging/prod) y migraciones versionadas; evita drift entre entornos.

## Storage
- Define buckets públicos/privados explícitamente y sus políticas RLS.
- Para contenido sensible, usa URLs firmadas y tiempos de expiración razonables.

## Checklist en PR
- [ ] Migraciones en `backend/supabase/migrations` (sin SQL suelto).
- [ ] RLS habilitado y políticas mínimas necesarias.
- [ ] Índices creados para consultas críticas; consultas validadas con `EXPLAIN`.
- [ ] Paginación por cursores si hay listas grandes.
- [ ] Funciones con `SECURITY INVOKER` y `search_path` vacío.
- [ ] Sin claves ni secretos en el repo; `.env` solo local.
- [ ] Tipos generados/actualizados si cambió el esquema.
- [ ] Docs/README actualizados (endpoints, migraciones, variables).

## Referencias
- Optimización de consultas: [Guía oficial](https://supabase.com/docs/guides/database/query-optimization?utm_source=openai)
- Reglas para AI editors (formato de reglas): [Referencia](https://supabase.com/ui/docs/ai-editors-rules/prompts?utm_source=openai)
- Paginación por cursores (contexto): [restack.io](https://www.restack.io/docs/supabase-knowledge-supabase-pagination-guide?utm_source=openai)
- RLS (conceptos y ejemplos): [supabase.wordpress.com - RLS](https://supabase.wordpress.com/2023/05/13/protegiendo-tus-datos-con-rls-como-definir-politicas-de-seguridad-en-supabase/?utm_source=openai)
- Vistas con `security_invoker`: [supabase.wordpress.com - vistas](https://supabase.wordpress.com/2023/05/17/administracion-tablas-y-vistas-en-supabase/?utm_source=openai)
- Claves `anon` vs `service_role`: [apidog.com](https://apidog.com/es/blog/supabase-api-2/?utm_source=openai)
